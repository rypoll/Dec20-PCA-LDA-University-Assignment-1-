

hept<-read.csv(file="C:/Users/T430/Google Drive/00 - Masters/Machine Learning/Week 3/heptathlon2016(1).csv",header=TRUE)
summary(hept[,2:8])

pairs(hept[,2:8])

hept.pca<-princomp(hept[,2:8])
summary(hept.pca)
loadings(hept.pca)

hept.pca<-princomp(hept[,2:8],cor=TRUE)
summary(hept.pca)
loadings(hept.pca)

predict(hept.pca)

plot(hept.pca)

###### scree.R ######
screeplot<-function(mydata,cor=F,maxcomp=10) {
my.pc<-princomp(mydata,cor=cor)
k<-min(dim(mydata),maxcomp)
x<-c(0:k)
y<-my.pc$sdev[1:k]*my.pc$sdev[1:k]
y<-c(0,y)
z<-100*cumsum(y)/sum(my.pc$sdev*my.pc$sdev)

plot(x,z,type="l",xlab="number of dimensions",
 cex.main=1.5, lwd=3, col="red",
 ylim=c(0,100),
 ylab="cumulative percentage of total variance",
  main="Scree plot of variances",
 xaxt="n", yaxt="n")
 
axis(1,at=x,lwd=2)
axis(2,at=c(0,20,40,60,80,100),lwd=2)
abline(a=100,b=0,lwd=2,lty="dashed",col="orange")
text(x,z,labels=x,cex=0.8,adj=c(1.2,-.1),col="blue")
}

# Examples of calls to it are
# screeplot(mydata) # default uses covariance, maximum 10 components
# screeplot(mydata,T) #  uses correlations, maximum 10 components
# screeplot(mydata,maxcomp=7) # default use covariance, maximum 7 components
# screeplot(mydata,T,maxcomp=8) # use correlations, maximum 8 components

#####################

screeplot(hept[,2:8],cor=TRUE)

##### ggscree.R #####
library(ggplot2)
ggscreeplot<-function(mydata,cor=F,maxcomp=10) {
my.pc<-princomp(mydata, cor=cor)
k<-min(dim(mydata),maxcomp)
x<-c(0:k)
y<-my.pc$sdev[1:k]*my.pc$sdev[1:k]
y<-c(0,y)
z<-100*cumsum(y)/sum(my.pc$sdev*my.pc$sdev)

p<-ggplot(mapping=aes(x,z))
p<-p+xlab("number of dimensions")+ylab("cumulative percentage of total variance")
p<-p+ggtitle("Scree plot of variances")
p<-p+geom_segment(aes(x=0,y=100,xend=k,yend=100),colour="orange",linetype="dashed",size=1)
p<-p+ylim(c(0,100))+scale_y_continuous(breaks=c(0,20,40,60,80,100))
p<-p+geom_text(aes(label=x),colour="blue",nudge_y=2)
p+geom_line(colour="red",size=1)
}

# Examples of calls to it are
# ggscreeplot(mydata) # default uses covariance, maximum 10 components
# ggscreeplot(mydata,T) #  uses correlations, maximum 10 components
# ggscreeplot(mydata,maxcomp=7) # default use covariance, maximum 7 components
# ggscreeplot(mydata,T,maxcomp=8) # use correlations, maximum 8 components

#####################

ggscreeplot(hept[,2:8],cor=TRUE)

plot(predict(hept.pca)[,1:2])
identify(predict(hept.pca)[,1:2])

plot(predict(hept.pca)[,2:3])
identify(predict(hept.pca)[,2:3])

eh2012<-c(12.54,1.86,14.28,22.83,6.48,47.49,128.65)
plot(predict(hept.pca)[,1:2])
eh2012.pca<-scale(t(eh2012),hept.pca$center,hept.pca$scale)%*%hept.pca$loadings
points(eh2012.pca[1],eh2012.pca[2],pch=16,col="red")

# Additional code to plot all of the 2012 data on the 2016 plot
# all data in a single CSV file heptathlon2012-6.csv (or merge R data
# frames with rbind, for example)

hept<-read.csv(file="heptathlon2012-6.csv",header=TRUE)
hept2016<-hept[1:27,]
hept2012<-hept[28:56,]
hept2016.pca<-princomp(hept2016[,2:8],cor=TRUE)
plot(predict(hept2016.pca)[,1:2])
hept2012pts<-predict(hept2016.pca,hept2012)
points(hept2012pts,pch=3)

# End of additional code

library(MASS)
eqscplot(predict(hept.pca)[,1:2])
eqscplot(predict(hept.pca)[,2:3])

biplot(hept.pca)

